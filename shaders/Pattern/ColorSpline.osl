//////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2016, Image Engine Design Inc. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//      * Redistributions of source code must retain the above
//        copyright notice, this list of conditions and the following
//        disclaimer.
//
//      * Redistributions in binary form must reproduce the above
//        copyright notice, this list of conditions and the following
//        disclaimer in the documentation and/or other materials provided with
//        the distribution.
//
//      * Neither the name of John Haddon nor the names of
//        any other contributors to this software may be used to endorse or
//        promote products derived from this software without specific prior
//        written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

#include "GafferOSL/Spline.h"

shader ColorSpline
(

	float splinePositions[] = { 0, 0, 1, 1 },
	color splineValues[] = { 0, 0, 1, 1 },
	string splineBasis = "catmull-rom",

	string direction = "custom" [[
		string help = "Which direction the spline is applied in. U or V use the UVs, Diagonal or Radial use the UVs together with a start and end position. Custom uses the `x` input, which may be hooked up to any shader returning a float. When using UVs, the overrideUV plug maybe be connected in order to use custom UVs.",
		string widget = "popup",
		string options = "Custom:custom|U:u|V:v|Diagonal:diagonal|Radial:radial",
		int connectable = 0,
	]],

	float x = 0 [[
		string help = "The spline coordinate to use when direction is set to Custom.",
		string visibleExpression = "direction == \"custom\"",
	]],
	point startPosition = 0 [[
		string help = "Determines the start of a Diagonal spline, or the center of a Radial spline.",
		int gafferNoduleLayoutVisible = 0,
		string visibleExpression = "direction == \"diagonal\" || direction == \"radial\"",
	]],
	point endPosition = point( 1, 1, 0 ) [[
		string help = "Determines the end of a Diagonal spline.",
		int gafferNoduleLayoutVisible = 0,
		string visibleExpression = "direction == \"diagonal\"",
	]],
	float radius = 1 [[
		string help = "The size of the falloff in when direction is set to Radial.",
		int gafferNoduleLayoutVisible = 0,
		string visibleExpression = "direction == \"radial\"",
	]],
	point overrideUV = 0 [[
		string help = "Connect to the nodule for this plug to override the UVs used when direction is set to U, V, Diagonal, or Radial. May be a 3 dimensional value for a 3 dimensional falloff.",
		string widget = "null",
	]],

	output color c = 0

)
{
	point uv = point( u, v, 0 );
	if( isconnected( overrideUV ) )
	{
		uv = overrideUV;
	}

	float splineCoord;
	if( direction == "custom" )
	{
		splineCoord = x;
	}
	else if( direction == "u" )
	{
		splineCoord = uv.x;
	}
	else if( direction == "v" )
	{
		splineCoord = uv.y;
	}
	else if( direction == "diagonal" )
	{
		vector disp = endPosition - startPosition;
		splineCoord = dot( uv - startPosition, disp ) / dot( disp, disp );
	}
	else if( direction == "radial" )
	{
		vector disp = endPosition - startPosition;
		splineCoord = length( uv - startPosition ) / radius;
	}

	c = colorSpline( splinePositions, splineValues, splineBasis, splineCoord );
}
