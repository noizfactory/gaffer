import Gaffer
import GafferCycles
import GafferImage
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 2, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 2, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["Backdrop_TitleBG"] = Gaffer.Backdrop( "Backdrop_TitleBG" )
parent.addChild( __children["Backdrop_TitleBG"] )
__children["Backdrop_TitleBG"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_TitleBG"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Spreadsheet"] = Gaffer.Spreadsheet( "Spreadsheet" )
parent.addChild( __children["Spreadsheet"] )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.TweakPlug( Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "intensity", ), adoptEnabledPlug = True )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.TweakPlug( Gaffer.FloatPlug( "value", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "exposure", ), adoptEnabledPlug = True )
__children["Spreadsheet"]["rows"].addRows( 3 )
__children["Spreadsheet"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Title"] = Gaffer.Backdrop( "Backdrop_Title" )
parent.addChild( __children["Backdrop_Title"] )
__children["Backdrop_Title"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Title"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderTweaks"] = GafferScene.ShaderTweaks( "ShaderTweaks" )
parent.addChild( __children["ShaderTweaks"] )
__children["ShaderTweaks"]["tweaks"].addChild( Gaffer.TweakPlug( Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "intensity", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderTweaks"]["tweaks"].addChild( Gaffer.TweakPlug( Gaffer.FloatPlug( "value", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "exposure", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderTweaks"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"] = Gaffer.Box( "Scene" )
parent.addChild( __children["Scene"] )
__children["Scene"].addChild( Gaffer.Box( "LightRig" ) )
__children["Scene"]["LightRig"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Scene"]["LightRig"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Scene"]["LightRig"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"].addChild( GafferScene.Group( "Group" ) )
__children["Scene"]["LightRig"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in3", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"]["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"].addChild( GafferCycles.CyclesLight( "spot_light" ) )
__children["Scene"]["LightRig"]["spot_light"].loadShader( "spot_light" )
__children["Scene"]["LightRig"]["spot_light"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"].addChild( GafferCycles.CyclesLight( "spot_light2" ) )
__children["Scene"]["LightRig"]["spot_light2"].loadShader( "spot_light" )
__children["Scene"]["LightRig"]["spot_light2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["LightRig"].addChild( GafferCycles.CyclesLight( "distant_light" ) )
__children["Scene"]["LightRig"]["distant_light"].loadShader( "distant_light" )
__children["Scene"]["LightRig"]["distant_light"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( Gaffer.Box( "Assets" ) )
__children["Scene"]["Assets"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Assets"].addChild( GafferScene.Plane( "Plane" ) )
__children["Scene"]["Assets"]["Plane"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Assets"].addChild( GafferScene.Group( "Group" ) )
__children["Scene"]["Assets"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Assets"]["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Assets"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Scene"]["Assets"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Scene"]["Assets"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Assets"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( GafferScene.Parent( "Parent" ) )
__children["Scene"]["Parent"]["children"].addChild( GafferScene.ScenePlug( "child1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Parent"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Scene"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Scene"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Tip1"] = Gaffer.Backdrop( "Backdrop_Tip1" )
parent.addChild( __children["Backdrop_Tip1"] )
__children["Backdrop_Tip1"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Tip1"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Tip1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Tip"] = Gaffer.Backdrop( "Backdrop_Tip" )
parent.addChild( __children["Backdrop_Tip"] )
__children["Backdrop_Tip"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Tip"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Tip2"] = Gaffer.Backdrop( "Backdrop_Tip2" )
parent.addChild( __children["Backdrop_Tip2"] )
__children["Backdrop_Tip2"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop_Tip2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 44229 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["Backdrop_TitleBG"]["title"].setValue( '' )
__children["Backdrop_TitleBG"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -9.49428558, -42.1358337 ), imath.V2f( 46.4567719, 21.1417542 ) ) )
__children["Backdrop_TitleBG"]["__uiPosition"].setValue( imath.V2f( -27.4000015, 1.4925909 ) )
__children["PathFilter"]["paths"].setInput( __children["Spreadsheet"]["enabledRowNames"] )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( -2.03234386, -26.3235779 ) )
__children["Spreadsheet"]["selector"].setValue( '${scene:path}' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["selector"], 'readOnly', True )
__children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["name"].setValue( 'color' )
__children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["enabled"].setValue( False )
__children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["name"].setValue( 'exposure' )
__children["Spreadsheet"]["rows"][1]["name"].setValue( '/lightrig/spot1' )
__children["Spreadsheet"]["rows"][1]["cells"]["intensity"]["value"]["name"].setValue( 'color' )
__children["Spreadsheet"]["rows"][1]["cells"]["intensity"]["value"]["mode"].setValue( 3 )
__children["Spreadsheet"]["rows"][1]["cells"]["intensity"]["value"]["value"].setValue( imath.Color3f( 0.699999988, 0.400000006, 0.400000006 ) )
__children["Spreadsheet"]["rows"][1]["cells"]["exposure"]["value"]["name"].setValue( 'exposure' )
__children["Spreadsheet"]["rows"][1]["cells"]["exposure"]["value"]["value"].setValue( 1.0 )
__children["Spreadsheet"]["rows"][2]["name"].setValue( '/lightrig/spot2' )
__children["Spreadsheet"]["rows"][2]["cells"]["intensity"]["value"]["name"].setValue( 'color' )
__children["Spreadsheet"]["rows"][2]["cells"]["intensity"]["value"]["value"].setValue( imath.Color3f( 0.100000001, 0.100000001, 0.5 ) )
__children["Spreadsheet"]["rows"][2]["cells"]["exposure"]["value"]["name"].setValue( 'exposure' )
__children["Spreadsheet"]["rows"][2]["cells"]["exposure"]["value"]["value"].setValue( 2.0 )
__children["Spreadsheet"]["rows"][3]["name"].setValue( '/lightrig/key' )
__children["Spreadsheet"]["rows"][3]["cells"]["intensity"]["value"]["name"].setValue( 'color' )
__children["Spreadsheet"]["rows"][3]["cells"]["exposure"]["value"]["name"].setValue( 'exposure' )
__children["Spreadsheet"]["rows"][3]["cells"]["exposure"]["value"]["value"].setValue( -1.0 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0], 'spreadsheet:rowNameWidth', 150 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"], 'spreadsheet:columnWidth', 146 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'nodule:type', 'GafferUI::CompoundNodule' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'noduleLayout:label', 'color' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Tweak' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'noduleLayout:visible', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'tweakPlugValueWidget:allowCreate', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"], 'tweakPlugValueWidget:allowRemove', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["name"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["name"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["name"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["name"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["name"], 'description', 'The name of the parameter to apply the tweak to.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["enabled"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["enabled"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["enabled"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["enabled"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["mode"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["mode"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["mode"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["mode"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["mode"], 'presetNames', IECore.StringVectorData( [ 'Create', 'Create If Missing', 'Replace', 'Add', 'Subtract', 'Multiply', 'Min', 'Max', 'Remove' ] ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["mode"], 'presetValues', IECore.IntVectorData( [ 5, 11, 0, 1, 2, 3, 6, 7, 4 ] ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["mode"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"], 'noduleLayout:label', 'color' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["r"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["r"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["r"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["g"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["g"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["g"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["b"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["b"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["b"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["intensity"]["value"]["value"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'nodule:type', 'GafferUI::CompoundNodule' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'noduleLayout:label', 'exposure' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Tweak' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'noduleLayout:visible', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'tweakPlugValueWidget:allowCreate', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"], 'tweakPlugValueWidget:allowRemove', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["name"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["name"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["name"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["name"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["name"], 'description', 'The name of the parameter to apply the tweak to.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["enabled"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["enabled"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["enabled"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["enabled"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["mode"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["mode"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["mode"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["mode"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["mode"], 'presetNames', IECore.StringVectorData( [ 'Create', 'Create If Missing', 'Replace', 'Add', 'Subtract', 'Multiply', 'Min', 'Max', 'Remove' ] ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["mode"], 'presetValues', IECore.IntVectorData( [ 5, 11, 0, 1, 2, 3, 6, 7, 4 ] ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["mode"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["value"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["value"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["value"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["value"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["exposure"]["value"]["value"], 'noduleLayout:label', 'exposure' )
__children["Spreadsheet"]["__uiPosition"].setValue( imath.V2f( 4.47035933, -34.0375595 ) )
__children["Backdrop_Title"]["title"].setValue( 'Example: Per-location Light Tweak Spreadsheet' )
__children["Backdrop_Title"]["description"].setValue( 'In this example, specific lights in a scene have their parameters tweaked by a network consisting of a ShaderTweaks, PathFilter, and Spreadsheet node. This is accomplished by setting up the Spreadsheet node to apply tweak per-location values.\n\nSpecific, per-location variation can be achieved by setting the selector to \\${scenePath} and connecting the Paths plug of the network\'s PathFilter node(s) to the spreadsheet in a special manner. Each row then drives a path in the filter to ensure other location are not affected. This way, each row dictates which location - or location pattern, if the path matching syntax is used - to filter. This effectively maps a set of values to each location.\n\nFor the full details on per-location variation with spreadsheets, see the "Spreadsheet Node" article in the main documentation.\n\nSince the tweaks are applied to existing shader parameters, they shouldn\'t apply to unspecific locations - only to the target lights.' )
__children["Backdrop_Title"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -22.3498783 ), imath.V2f( 30, 21.0173645 ) ) )
__children["Backdrop_Title"]["__uiPosition"].setValue( imath.V2f( -19.0039406, 1.4623704 ) )
__children["ShaderTweaks"]["in"].setInput( __children["Scene"]["out"] )
__children["ShaderTweaks"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["ShaderTweaks"]["shader"].setValue( 'cycles:light' )
__children["ShaderTweaks"]["ignoreMissing"].setValue( True )
__children["ShaderTweaks"]["tweaks"]["intensity"].setInput( __children["Spreadsheet"]["out"]["intensity"] )
__children["ShaderTweaks"]["tweaks"]["exposure"].setInput( __children["Spreadsheet"]["out"]["exposure"] )
__children["ShaderTweaks"]["__uiPosition"].setValue( imath.V2f( -17.7029724, -30.5056095 ) )
__children["Scene"]["LightRig"]["out"].setInput( __children["Scene"]["LightRig"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["LightRig"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["LightRig"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["LightRig"]["out"], 'description', 'The output scene.' )
__children["Scene"]["LightRig"]["BoxOut"]["in"].setInput( __children["Scene"]["LightRig"]["Group"]["out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["LightRig"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["LightRig"]["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["Scene"]["LightRig"]["BoxOut"]["__out"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["Scene"]["LightRig"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["LightRig"]["BoxOut"]["__out"], 'description', 'The output scene.' )
__children["Scene"]["LightRig"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -22.3566322, -29.3702221 ) )
__children["Scene"]["LightRig"]["__uiPosition"].setValue( imath.V2f( -5.97280025, -8.22784424 ) )
__children["Scene"]["LightRig"]["Group"]["in"][0].setInput( __children["Scene"]["LightRig"]["spot_light"]["out"] )
__children["Scene"]["LightRig"]["Group"]["in"][1].setInput( __children["Scene"]["LightRig"]["spot_light2"]["out"] )
__children["Scene"]["LightRig"]["Group"]["in"][2].setInput( __children["Scene"]["LightRig"]["distant_light"]["out"] )
__children["Scene"]["LightRig"]["Group"]["name"].setValue( 'lightrig' )
__children["Scene"]["LightRig"]["Group"]["__uiPosition"].setValue( imath.V2f( -23.8565006, -21.0364094 ) )
__children["Scene"]["LightRig"]["spot_light"]["name"].setValue( 'spot1' )
__children["Scene"]["LightRig"]["spot_light"]["transform"]["translate"].setValue( imath.V3f( 0, 3.83948684, 9.30040836 ) )
__children["Scene"]["LightRig"]["spot_light"]["transform"]["rotate"].setValue( imath.V3f( -35.115654, 0, 0 ) )
__children["Scene"]["LightRig"]["spot_light"]["parameters"]["color"].setValue( imath.Color3f( 0.5, 0.100000001, 0.100000001 ) )
__children["Scene"]["LightRig"]["spot_light"]["__uiPosition"].setValue( imath.V2f( -38.9453125, -12.8723469 ) )
__children["Scene"]["LightRig"]["spot_light2"]["name"].setValue( 'spot2' )
__children["Scene"]["LightRig"]["spot_light2"]["transform"]["translate"].setValue( imath.V3f( -5.34443092, 3.83948684, -5.6587677 ) )
__children["Scene"]["LightRig"]["spot_light2"]["transform"]["rotate"].setValue( imath.V3f( -35.1156578, -112.208961, 8.65142192e-06 ) )
__children["Scene"]["LightRig"]["spot_light2"]["parameters"]["color"].setValue( imath.Color3f( 0, 0, 0.5 ) )
__children["Scene"]["LightRig"]["spot_light2"]["__uiPosition"].setValue( imath.V2f( -25.3564987, -12.8723469 ) )
__children["Scene"]["LightRig"]["distant_light"]["name"].setValue( 'key' )
__children["Scene"]["LightRig"]["distant_light"]["transform"]["translate"].setValue( imath.V3f( 0, 10, 0 ) )
__children["Scene"]["LightRig"]["distant_light"]["transform"]["rotate"].setValue( imath.V3f( -70, 0, 0 ) )
__children["Scene"]["LightRig"]["distant_light"]["parameters"]["color"].setValue( imath.Color3f( 1, 1, 0.824999988 ) )
__children["Scene"]["LightRig"]["distant_light"]["visualiserAttributes"]["scale"]["value"].setValue( 5.0 )
__children["Scene"]["LightRig"]["distant_light"]["visualiserAttributes"]["scale"]["enabled"].setValue( True )
__children["Scene"]["LightRig"]["distant_light"]["__uiPosition"].setValue( imath.V2f( -11.753561, -12.5543776 ) )
__children["Scene"]["Assets"]["__uiPosition"].setValue( imath.V2f( -18.8852253, -8.22784424 ) )
__children["Scene"]["Assets"]["Plane"]["transform"]["rotate"].setValue( imath.V3f( 90, 0, 0 ) )
__children["Scene"]["Assets"]["Plane"]["dimensions"].setValue( imath.V2f( 25, 25 ) )
__children["Scene"]["Assets"]["Plane"]["__uiPosition"].setValue( imath.V2f( -11.749999, 12.032032 ) )
__children["Scene"]["Assets"]["Group"]["in"][0].setInput( __children["Scene"]["Assets"]["Plane"]["out"] )
__children["Scene"]["Assets"]["Group"]["name"].setValue( 'assets' )
__children["Scene"]["Assets"]["Group"]["__uiPosition"].setValue( imath.V2f( -10.2499971, 3.86796904 ) )
__children["Scene"]["Assets"]["BoxOut"]["in"].setInput( __children["Scene"]["Assets"]["Group"]["out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["Assets"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["Assets"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["Assets"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["Scene"]["Assets"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -8.74933052, -4.46406221 ) )
__children["Scene"]["Assets"]["out"].setInput( __children["Scene"]["Assets"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["Assets"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["Assets"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["Assets"]["out"], 'description', 'The processed output scene.' )
__children["Scene"]["Parent"]["in"].setInput( __children["Scene"]["Assets"]["out"] )
__children["Scene"]["Parent"]["parent"].setValue( '/' )
__children["Scene"]["Parent"]["children"][0].setInput( __children["Scene"]["LightRig"]["out"] )
__children["Scene"]["Parent"]["__uiPosition"].setValue( imath.V2f( -18.1352253, -16.5598755 ) )
__children["Scene"]["out"].setInput( __children["Scene"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["out"], 'description', 'The processed output scene.' )
__children["Scene"]["BoxOut"]["in"].setInput( __children["Scene"]["Parent"]["out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["Scene"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -16.6352253, -24.8919067 ) )
__children["Scene"]["__uiPosition"].setValue( imath.V2f( -16.2029724, -22.1735783 ) )
Gaffer.Metadata.registerValue( __children["Backdrop_Tip1"], 'nodeGadget:color', imath.Color3f( 0.300000012, 0.5, 0.460500002 ) )
__children["Backdrop_Tip1"]["title"].setValue( 'Tip: Driving tweaks' )
__children["Backdrop_Tip1"]["description"].setValue( "To connect a tweak plug to a spreadsheet, right-click any element in the tweak in the Node Editor, then select Add to Spreadsheet (Tweak) > [spreadsheet name].\n\nThe resulting column will drive the tweak, including the tweak mode.\n\nA driven tweak's enabled switch is tied to the enabled state of the cell in the spreadsheet. Therefore, to disable the tweak for a row, simply disable its corresponding cell." )
__children["Backdrop_Tip1"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -15.1441078 ), imath.V2f( 20, 15.5275927 ) ) )
__children["Backdrop_Tip1"]["__uiPosition"].setValue( imath.V2f( 74.2942581, -25.329834 ) )
Gaffer.Metadata.registerValue( __children["Backdrop_Tip"], 'nodeGadget:color', imath.Color3f( 0.300000012, 0.5, 0.460500002 ) )
__children["Backdrop_Tip"]["title"].setValue( '' )
__children["Backdrop_Tip"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -15.1441078 ), imath.V2f( 31.9457626, 15.5742683 ) ) )
__children["Backdrop_Tip"]["__uiPosition"].setValue( imath.V2f( 30.8067017, -25.2947807 ) )
Gaffer.Metadata.registerValue( __children["Backdrop_Tip2"], 'nodeGadget:color', imath.Color3f( 0.300000012, 0.5, 0.460500002 ) )
__children["Backdrop_Tip2"]["title"].setValue( 'Tip: Driving PathFilter node paths' )
__children["Backdrop_Tip2"]["description"].setValue( "To ensure the ShaderTweaks node only affects locations that match the spreadsheet rows, you must connect the paths plug of a PathFilter plug to the Spreadsheet:\n\n1. Select the PathFilter node.\n2. In the Node Editor, click the gear button, then select Create Spreadsheet or Connect to Spreadsheet > [spreadsheet name] from the context menu.\n\nThe spreadsheet's rows will now define the filter's paths, and the Selector plug will automatically be driven as `\\$\\{scene:path\\}`." )
__children["Backdrop_Tip2"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -15.1441078 ), imath.V2f( 20, 15.4262486 ) ) )
__children["Backdrop_Tip2"]["__uiPosition"].setValue( imath.V2f( 36.351059, -25.2852669 ) )


del __children

