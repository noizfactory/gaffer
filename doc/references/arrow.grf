import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 57, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["OSLCode"] = GafferOSL.OSLCode( "OSLCode" )
parent.addChild( __children["OSLCode"] )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "resolution", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["out"].addChild( Gaffer.FloatPlug( "output2", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Constant_Head"] = GafferImage.Constant( "Constant_Head" )
parent.addChild( __children["Constant_Head"] )
__children["Constant_Head"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Merge"] = GafferImage.Merge( "Merge" )
parent.addChild( __children["Merge"] )
__children["Merge"]["in"].addChild( GafferImage.ImagePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Merge"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["width"] = Gaffer.FloatPlug( "width", defaultValue = 40.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["width"] )
__children["Expression"] = Gaffer.Expression( "Expression" )
parent.addChild( __children["Expression"] )
__children["Expression"]["__in"].addChild( Gaffer.Color4fPlug( "p0", defaultValue = imath.Color4f( 0, 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.IntPlug( "p1", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.V2fPlug( "p2", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.FloatPlug( "p3", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.FloatPlug( "p4", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.FloatPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.V2fPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.V2iPlug( "p2", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V2i( -2147483648, -2147483648 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.FloatPlug( "p3", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.V2fPlug( "p4", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.V2fPlug( "p5", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.Box2iPlug( "p6", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Box2i(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["Constant_Tail"] = GafferImage.Constant( "Constant_Tail" )
parent.addChild( __children["Constant_Tail"] )
__children["Constant_Tail"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Merge_Arrow"] = GafferImage.Merge( "Merge_Arrow" )
parent.addChild( __children["Merge_Arrow"] )
__children["Merge_Arrow"]["in"].addChild( GafferImage.ImagePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Merge_Arrow"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ImageTransform_Tail"] = GafferImage.ImageTransform( "ImageTransform_Tail" )
parent.addChild( __children["ImageTransform_Tail"] )
__children["ImageTransform_Tail"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["color"] = Gaffer.Color4fPlug( "color", defaultValue = imath.Color4f( 1, 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["color"] )
__children["length"] = Gaffer.IntPlug( "length", defaultValue = 25, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["length"] )
__children["ImageTransform_Arrow"] = GafferImage.ImageTransform( "ImageTransform_Arrow" )
parent.addChild( __children["ImageTransform_Arrow"] )
__children["ImageTransform_Arrow"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["translate"] = Gaffer.V2fPlug( "translate", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["translate"] )
__children["rotate"] = Gaffer.FloatPlug( "rotate", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["rotate"] )
__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "A", Gaffer.FloatPlug( "value", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"] = GafferImage.Shuffle( "Shuffle" )
parent.addChild( __children["Shuffle"] )
__children["Shuffle"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel3", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Grade"] = GafferImage.Grade( "Grade" )
parent.addChild( __children["Grade"] )
__children["Grade"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Crop"] = GafferImage.Crop( "Crop" )
parent.addChild( __children["Crop"] )
__children["Crop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["OSLCode"]["parameters"]["resolution"].setInput( __children["Expression"]["__out"]["p0"] )
__children["OSLCode"]["code"].setValue( 'output2 = clamp( (u * 0.5 - abs( v - 0.5 ) ) * resolution, 0, 1 );' )
__children["OSLCode"]["__uiPosition"].setValue( imath.V2f( 393.554749, 216.936371 ) )
__children["Constant_Head"]["format"]["displayWindow"]["min"].setValue( imath.V2i( 0, 0 ) )
Gaffer.Metadata.registerValue( __children["Constant_Head"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["Constant_Head"]["format"]["displayWindow"]["max"].setInput( __children["Expression"]["__out"]["p2"] )
__children["Constant_Head"]["color"].setValue( imath.Color4f( 0, 0, 0, 0 ) )
__children["Constant_Head"]["__uiPosition"].setValue( imath.V2f( 407.016907, 225.026978 ) )
__children["Merge"]["in"][0].setInput( __children["BoxIn"]["out"] )
__children["Merge"]["in"][1].setInput( __children["ImageTransform_Arrow"]["out"] )
__children["Merge"]["operation"].setValue( 8 )
__children["Merge"]["__uiPosition"].setValue( imath.V2f( 393.048798, 162.287933 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'connectionGadget:color', imath.Color3f( 0.300000012, 0.0500000007, 0.449999988 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.400000006, 0.400000006, 0.400000006 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 6 )
__children["BoxOut"]["in"].setInput( __children["Merge"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'connectionGadget:color', imath.Color3f( 0.300000012, 0.0500000007, 0.449999988 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.400000006, 0.100000001, 0.699999988 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 394.548096, 153.955627 ) )
Gaffer.Metadata.registerValue( __children["width"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["width"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["width"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["width"], 'description', 'Arrowhead width, in pixels. Arrowhead length is `width x 0.825`.' )
__children["Expression"]["__in"]["p0"].setInput( __children["color"] )
__children["Expression"]["__in"]["p1"].setInput( __children["length"] )
__children["Expression"]["__in"]["p2"].setInput( __children["translate"] )
__children["Expression"]["__in"]["p3"].setInput( __children["rotate"] )
__children["Expression"]["__in"]["p4"].setInput( __children["width"] )
__children["Expression"]["__uiPosition"].setValue( imath.V2f( 387.065216, 230.0215 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 390.048798, 170.619965 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["Constant_Tail"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["Constant_Tail"]["format"]["displayWindow"].setInput( __children["Expression"]["__out"]["p6"] )
__children["Constant_Tail"]["__uiPosition"].setValue( imath.V2f( 425.492889, 219.436371 ) )
__children["Merge_Arrow"]["in"][0].setInput( __children["OSLImage"]["out"] )
__children["Merge_Arrow"]["in"][1].setInput( __children["ImageTransform_Tail"]["out"] )
__children["Merge_Arrow"]["operation"].setValue( 8 )
__children["Merge_Arrow"]["__uiPosition"].setValue( imath.V2f( 410.016907, 203.108246 ) )
__children["ImageTransform_Tail"]["in"].setInput( __children["Constant_Tail"]["out"] )
__children["ImageTransform_Tail"]["transform"]["translate"].setInput( __children["Expression"]["__out"]["p1"] )
__children["ImageTransform_Tail"]["__uiPosition"].setValue( imath.V2f( 425.492889, 211.272308 ) )
Gaffer.Metadata.registerValue( __children["color"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["color"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["color"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["color"], 'description', 'Arrow color.' )
Gaffer.Metadata.registerValue( __children["length"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["length"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["length"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["length"], 'description', 'Arrow tail length, in pixels.' )
__children["ImageTransform_Arrow"]["in"].setInput( __children["Crop"]["out"] )
__children["ImageTransform_Arrow"]["transform"]["translate"].setInput( __children["Expression"]["__out"]["p5"] )
__children["ImageTransform_Arrow"]["transform"]["rotate"].setInput( __children["Expression"]["__out"]["p3"] )
__children["ImageTransform_Arrow"]["transform"]["pivot"].setInput( __children["Expression"]["__out"]["p4"] )
__children["ImageTransform_Arrow"]["__uiPosition"].setValue( imath.V2f( 410.016907, 170.451996 ) )
Gaffer.Metadata.registerValue( __children["translate"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["translate"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["translate"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["translate"], 'description', 'Position of the arrow, in pixels.' )
Gaffer.Metadata.registerValue( __children["rotate"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["rotate"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["rotate"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["rotate"], 'description', 'Rotation of the arrow, in degrees. The arrow will pivot around the center of its data window.' )
__children["OSLImage"]["in"].setInput( __children["Constant_Head"]["out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["OSLCode"]["out"]["output2"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( 407.016907, 216.336365 ) )
__children["Shuffle"]["in"].setInput( __children["Merge_Arrow"]["out"] )
__children["Shuffle"]["channels"]["channel"]["out"].setValue( 'R' )
__children["Shuffle"]["channels"]["channel"]["in"].setValue( 'A' )
__children["Shuffle"]["channels"]["channel1"]["out"].setValue( 'G' )
__children["Shuffle"]["channels"]["channel1"]["in"].setValue( 'A' )
__children["Shuffle"]["channels"]["channel2"]["out"].setValue( 'B' )
__children["Shuffle"]["channels"]["channel2"]["in"].setValue( 'A' )
__children["Shuffle"]["channels"]["channel3"]["out"].setValue( 'A' )
__children["Shuffle"]["channels"]["channel3"]["in"].setValue( 'A' )
__children["Shuffle"]["__uiPosition"].setValue( imath.V2f( 410.016907, 194.944183 ) )
__children["Grade"]["in"].setInput( __children["Shuffle"]["out"] )
__children["Grade"]["channels"].setValue( '*' )
__children["Grade"]["processUnpremultiplied"].setValue( True )
__children["Grade"]["multiply"].setInput( __children["color"] )
__children["Grade"]["__uiPosition"].setValue( imath.V2f( 410.016907, 186.780121 ) )
__children["Crop"]["in"].setInput( __children["Grade"]["out"] )
__children["Crop"]["areaSource"].setValue( 1 )
__children["Crop"]["area"].setValue( imath.Box2i( imath.V2i( 0, 0 ), imath.V2i( 85, 100 ) ) )
__children["Crop"]["__uiPosition"].setValue( imath.V2f( 410.016907, 178.616058 ) )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 7 )
__children["Expression"]["__engine"].setValue( 'python' )
__children["Expression"]["__expression"].setValue( 'import imath\n\nscreenScale = context.get( "docs:screenScale", 1.0 )\n\n# Colors\ncolor = parent["__in"]["p0"]\n\n# Head\nheadWidth = parent["__in"]["p4"] * screenScale\nheadLength = headWidth * 0.85\n\nparent["__out"]["p2"] = imath.V2i( headLength, headWidth )\nparent["__out"]["p0"] = headWidth\n\n# Tail\ntailWidth = headWidth * 0.25\ntailLength = parent["__in"]["p1"] * screenScale\n\nparent["__out"]["p6"] = imath.Box2i( imath.V2i( 0, 0 ), imath.V2i( tailLength, tailWidth ) )\nparent["__out"]["p1"] = imath.V2i( headLength, ( headWidth / 2 ) - ( tailWidth / 2 ) )\n\n# Final transform\ntranslate = parent["__in"]["p2"]\nrotate = parent["__in"]["p3"]\npivotX = ( headLength + tailLength ) / 2\npivotY = headWidth / 2\n\nparent["__out"]["p5"] = imath.V2f( translate.x * screenScale, translate.y * screenScale )\nparent["__out"]["p3"] = rotate\nparent["__out"]["p4"] = imath.V2f( pivotX, pivotY )' )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'description', "Scalable 2D arrow. Arrowhead size, length, and position will scale to the value of the `docs:screenScale` float Context Variable, if present.\n\nFor example, if `docs:screenScale` is `2.0`, the arrow's sizing and positional plugs will be scaled or offset by a factor of 2." )


del __children

