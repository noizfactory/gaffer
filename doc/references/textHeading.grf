import Gaffer
import GafferImage
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 57, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["Text_Heading"] = GafferImage.Text( "Text_Heading" )
parent.addChild( __children["Text_Heading"] )
__children["Text_Heading"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["Text_Body"] = GafferImage.Text( "Text_Body" )
parent.addChild( __children["Text_Body"] )
__children["Text_Body"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["text"] = Gaffer.StringPlug( "text", defaultValue = '\n', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["text"] )
__children["Translate"] = Gaffer.V2fPlug( "Translate", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["Translate"] )
__children["Rotate"] = Gaffer.FloatPlug( "Rotate", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["Rotate"] )
__children["Scale"] = Gaffer.V2fPlug( "Scale", defaultValue = imath.V2f( 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["Scale"] )
__children["Pivot"] = Gaffer.V2fPlug( "Pivot", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["Pivot"] )
__children["headingFont"] = Gaffer.StringPlug( "headingFont", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["headingFont"] )
__children["size"] = Gaffer.V2iPlug( "size", defaultValue = imath.V2i( 12, 12 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["size"] )
__children["horizontalAlignment"] = Gaffer.IntPlug( "horizontalAlignment", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["horizontalAlignment"] )
__children["verticalAlignment"] = Gaffer.IntPlug( "verticalAlignment", defaultValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["verticalAlignment"] )
__children["Expression"] = Gaffer.Expression( "Expression" )
parent.addChild( __children["Expression"] )
__children["Expression"]["__in"].addChild( Gaffer.StringPlug( "p0", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.StringPlug( "p1", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.StringPlug( "p2", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.StringPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 'Hello World', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.StringPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = 'Hello World', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.StringPlug( "p2", direction = Gaffer.Plug.Direction.Out, defaultValue = 'Vera.ttf', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["bodyFont"] = Gaffer.StringPlug( "bodyFont", defaultValue = 'Vera.ttf', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["bodyFont"] )
__children["headingColor"] = Gaffer.Color4fPlug( "headingColor", defaultValue = imath.Color4f( 1, 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["headingColor"] )
__children["bodyColor"] = Gaffer.Color4fPlug( "bodyColor", defaultValue = imath.Color4f( 1, 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["bodyColor"] )
__children["area"] = Gaffer.Box2iPlug( "area", defaultValue = imath.Box2i( imath.V2i( 0, 0 ), imath.V2i( 0, 0 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["area"] )
__children["Text_Heading"]["out"].setInput( __children["Text_Heading"]["__merge"]["out"] )
__children["Text_Heading"]["in"].setInput( __children["BoxIn"]["out"] )
__children["Text_Heading"]["color"].setInput( __children["headingColor"] )
__children["Text_Heading"]["text"].setInput( __children["Expression"]["__out"]["p1"] )
__children["Text_Heading"]["font"].setInput( __children["Expression"]["__out"]["p2"] )
__children["Text_Heading"]["size"].setInput( __children["size"] )
__children["Text_Heading"]["area"].setInput( __children["area"] )
__children["Text_Heading"]["horizontalAlignment"].setInput( __children["horizontalAlignment"] )
__children["Text_Heading"]["verticalAlignment"].setInput( __children["verticalAlignment"] )
__children["Text_Heading"]["transform"]["translate"].setInput( __children["Translate"] )
__children["Text_Heading"]["transform"]["rotate"].setInput( __children["Rotate"] )
__children["Text_Heading"]["transform"]["scale"].setInput( __children["Scale"] )
__children["Text_Heading"]["transform"]["pivot"].setInput( __children["Pivot"] )
__children["Text_Heading"]["__uiPosition"].setValue( imath.V2f( -33.6551819, -22.7886925 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 14 )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
__children["BoxOut"]["in"].setInput( __children["Text_Body"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( -32.1551819, -39.2847862 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( -33.6551819, -14.4566612 ) )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 19 )
__children["Text_Body"]["out"].setInput( __children["Text_Body"]["__merge"]["out"] )
__children["Text_Body"]["in"].setInput( __children["Text_Heading"]["out"] )
__children["Text_Body"]["color"].setInput( __children["bodyColor"] )
__children["Text_Body"]["text"].setInput( __children["Expression"]["__out"]["p0"] )
__children["Text_Body"]["font"].setInput( __children["bodyFont"] )
__children["Text_Body"]["size"].setInput( __children["size"] )
__children["Text_Body"]["area"].setInput( __children["area"] )
__children["Text_Body"]["horizontalAlignment"].setInput( __children["horizontalAlignment"] )
__children["Text_Body"]["verticalAlignment"].setInput( __children["verticalAlignment"] )
__children["Text_Body"]["transform"]["translate"].setInput( __children["Translate"] )
__children["Text_Body"]["transform"]["rotate"].setInput( __children["Rotate"] )
__children["Text_Body"]["transform"]["scale"].setInput( __children["Scale"] )
__children["Text_Body"]["transform"]["pivot"].setInput( __children["Pivot"] )
__children["Text_Body"]["__uiPosition"].setValue( imath.V2f( -33.6551819, -30.952755 ) )
Gaffer.Metadata.registerValue( __children["text"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["text"], 'plugValueWidget:type', 'GafferUI.MultiLineStringPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["text"], 'divider', False )
Gaffer.Metadata.registerValue( __children["text"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["text"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["text"], 'description', 'The text to be rendered.' )
Gaffer.Metadata.registerValue( __children["Translate"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Translate"], 'layout:section', 'Transform' )
Gaffer.Metadata.registerValue( __children["Translate"], 'layout:index', 15 )
Gaffer.Metadata.registerValue( __children["Rotate"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Rotate"], 'layout:section', 'Transform' )
Gaffer.Metadata.registerValue( __children["Rotate"], 'layout:index', 16 )
Gaffer.Metadata.registerValue( __children["Scale"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Scale"], 'layout:section', 'Transform' )
Gaffer.Metadata.registerValue( __children["Scale"], 'layout:index', 17 )
Gaffer.Metadata.registerValue( __children["Pivot"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Pivot"], 'layout:section', 'Transform' )
Gaffer.Metadata.registerValue( __children["Pivot"], 'layout:index', 18 )
Gaffer.Metadata.registerValue( __children["headingFont"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["headingFont"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["headingFont"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["headingFont"], 'description', 'The font to render the heading text with. This should be a .ttf font file which is located on the paths specified by the `IECORE_FONT_PATHS` environment variable.' )
Gaffer.Metadata.registerValue( __children["size"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["size"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["size"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["size"], 'divider', True )
Gaffer.Metadata.registerValue( __children["size"], 'description', "The size of the text's font, in pixels. For best quality results for constant sized text, use this over the scale setting on the transform, which is better suited for smoothly animating the size." )
Gaffer.Metadata.registerValue( __children["horizontalAlignment"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["horizontalAlignment"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["horizontalAlignment"], 'preset:Left', 0 )
Gaffer.Metadata.registerValue( __children["horizontalAlignment"], 'preset:Right', 1 )
Gaffer.Metadata.registerValue( __children["horizontalAlignment"], 'preset:Center', 2 )
Gaffer.Metadata.registerValue( __children["horizontalAlignment"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["horizontalAlignment"], 'layout:index', 12 )
Gaffer.Metadata.registerValue( __children["horizontalAlignment"], 'description', 'Determines whether the text is aligned to the left or\nright of the text area, or centered within it.' )
Gaffer.Metadata.registerValue( __children["verticalAlignment"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["verticalAlignment"], 'preset:Bottom', 0 )
Gaffer.Metadata.registerValue( __children["verticalAlignment"], 'preset:Top', 1 )
Gaffer.Metadata.registerValue( __children["verticalAlignment"], 'preset:Center', 2 )
Gaffer.Metadata.registerValue( __children["verticalAlignment"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["verticalAlignment"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["verticalAlignment"], 'layout:index', 13 )
Gaffer.Metadata.registerValue( __children["verticalAlignment"], 'description', 'Determines whether the text is aligned to the bottom or\ntop of the text area, or centered within it.' )
__children["Expression"]["__in"]["p0"].setInput( __children["text"] )
__children["Expression"]["__in"]["p1"].setInput( __children["bodyFont"] )
__children["Expression"]["__in"]["p2"].setInput( __children["headingFont"] )
__children["Expression"]["__uiPosition"].setValue( imath.V2f( -43.7538719, -22.8565331 ) )
Gaffer.Metadata.registerValue( __children["bodyFont"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["bodyFont"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["bodyFont"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["bodyFont"], 'description', 'The font to render the body text with. This should be a .ttf font file which is located on the paths specified by the `IECORE_FONT_PATHS` environment variable.' )
Gaffer.Metadata.registerValue( __children["headingColor"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["headingColor"], 'description', 'The colour of the heading text.' )
Gaffer.Metadata.registerValue( __children["headingColor"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["headingColor"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["headingColor"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["headingColor"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["headingColor"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["headingColor"]["a"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["bodyColor"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["bodyColor"], 'description', 'The colour of the body text.' )
Gaffer.Metadata.registerValue( __children["bodyColor"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["bodyColor"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["bodyColor"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["bodyColor"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["bodyColor"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["bodyColor"]["a"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["area"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["area"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["area"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["area"], 'description', 'The text frame, in pixels relative to the data window.' )
__children["Expression"]["__engine"].setValue( 'python' )
__children["Expression"]["__expression"].setValue( '# Text font\nif parent["__in"]["p2"] is not "" :\n\tparent["__out"]["p2"] = parent["__in"]["p2"]\nelse :\n\tparent["__out"]["p2"] = parent["__in"]["p1"]\n\n\n# Text\ntext = parent["__in"]["p0"]\nlines = text.split( "\\n" )\nparent["__out"]["p1"] = lines[0]\nbody = lines\nbody.pop( 0 )\nbody.insert( 0, " " )\nbody = "\\n".join( body )\nparent["__out"]["p0"] = body' )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'description', 'Adds text to an image, with additional heading control. The first line can be formatted differently to appear like a heading.\n\nHeading can be colored separately. If the Heading Font plug points to a font file on disk, the first line of the text will be in that font. If left blank, it will fall back to the font determined by the Body Font plug.' )
Gaffer.Metadata.registerValue( parent, 'documentation:url', '' )


del __children

