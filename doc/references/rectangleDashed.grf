import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 57, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["Rectangle"] = GafferImage.Rectangle( "Rectangle" )
parent.addChild( __children["Rectangle"] )
__children["Rectangle"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["color"] = Gaffer.Color4fPlug( "color", defaultValue = imath.Color4f( 1, 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["color"] )
__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "A", Gaffer.FloatPlug( "value", defaultValue = 1.0, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Merge"] = GafferImage.Merge( "Merge" )
parent.addChild( __children["Merge"] )
__children["Merge"]["in"].addChild( GafferImage.ImagePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Merge"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"] = GafferImage.Shuffle( "Shuffle" )
parent.addChild( __children["Shuffle"] )
__children["Shuffle"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel3", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Shuffle"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"] = GafferOSL.OSLCode( "OSLCode" )
parent.addChild( __children["OSLCode"] )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "dashLength", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "minX", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "minY", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "maxX", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "maxY", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "cornerRadius", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "lineWidth", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["out"].addChild( Gaffer.FloatPlug( "output1", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn1"] = Gaffer.BoxIn( "BoxIn1" )
parent.addChild( __children["BoxIn1"] )
__children["BoxIn1"].setup( Gaffer.FloatPlug( "out", defaultValue = 0.0, ) )
__children["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["dashLength"] = Gaffer.FloatPlug( "dashLength", defaultValue = 32.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["dashLength"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["Merge1"] = GafferImage.Merge( "Merge1" )
parent.addChild( __children["Merge1"] )
__children["Merge1"]["in"].addChild( GafferImage.ImagePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Merge1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["area"] = Gaffer.Box2fPlug( "area", defaultValue = imath.Box2f( imath.V2f( 10, 10 ), imath.V2f( 1910, 1070 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["area"] )
__children["lineWidth"] = Gaffer.FloatPlug( "lineWidth", defaultValue = 4.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["lineWidth"] )
__children["cornerRadius"] = Gaffer.FloatPlug( "cornerRadius", defaultValue = 0.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["cornerRadius"] )
__children["Rectangle"]["out"].setInput( __children["Rectangle"]["__merge"]["out"] )
__children["Rectangle"]["in"].setInput( __children["BoxIn"]["out"] )
__children["Rectangle"]["color"].setInput( __children["color"] )
__children["Rectangle"]["area"].setInput( __children["area"] )
__children["Rectangle"]["lineWidth"].setInput( __children["lineWidth"] )
__children["Rectangle"]["cornerRadius"].setInput( __children["cornerRadius"] )
__children["Rectangle"]["__uiPosition"].setValue( imath.V2f( 40.0507965, 11.3019562 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'connectionGadget:color', imath.Color3f( 0.300000012, 0.0500000007, 0.449999988 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.400000006, 0.400000006, 0.400000006 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["in"], 'connectionGadget:color', imath.Color3f( 0.125, 0.125, 0.125 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:color', imath.Color3f( 0.400000006, 0.400000006, 0.400000006 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 1 )
__children["BoxOut"]["in"].setInput( __children["Merge1"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'connectionGadget:color', imath.Color3f( 0.300000012, 0.0500000007, 0.449999988 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.400000006, 0.100000001, 0.699999988 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 44.5507927, -29.686327 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'connectionGadget:color', imath.Color3f( 0.300000012, 0.0500000007, 0.449999988 ) )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.400000006, 0.100000001, 0.699999988 ) )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 40.0507965, 19.6339874 ) )
Gaffer.Metadata.registerValue( __children["color"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["color"], 'description', 'The colour of the rectangle.' )
Gaffer.Metadata.registerValue( __children["color"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["color"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["color"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["color"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["color"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["color"]["a"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
__children["OSLImage"]["in"].setInput( __children["Rectangle"]["out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["OSLCode"]["out"]["output1"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( 75.3099594, 3.13789272 ) )
__children["Merge"]["in"][0].setInput( __children["Rectangle"]["out"] )
__children["Merge"]["in"][1].setInput( __children["Shuffle"]["out"] )
__children["Merge"]["operation"].setValue( 7 )
__children["Merge"]["__uiPosition"].setValue( imath.V2f( 43.0507965, -13.1902323 ) )
__children["Shuffle"]["in"].setInput( __children["OSLImage"]["out"] )
__children["Shuffle"]["channels"]["channel"]["out"].setValue( 'R' )
__children["Shuffle"]["channels"]["channel"]["in"].setValue( 'A' )
__children["Shuffle"]["channels"]["channel1"]["out"].setValue( 'G' )
__children["Shuffle"]["channels"]["channel1"]["in"].setValue( 'A' )
__children["Shuffle"]["channels"]["channel2"]["out"].setValue( 'B' )
__children["Shuffle"]["channels"]["channel2"]["in"].setValue( 'A' )
__children["Shuffle"]["channels"]["channel3"]["out"].setValue( 'A' )
__children["Shuffle"]["channels"]["channel3"]["in"].setValue( 'A' )
__children["Shuffle"]["__uiPosition"].setValue( imath.V2f( 75.3099594, -5.02616978 ) )
__children["OSLCode"]["parameters"]["dashLength"].setInput( __children["BoxIn1"]["out"] )
__children["OSLCode"]["parameters"]["minX"].setInput( __children["Rectangle"]["area"]["min"]["x"] )
__children["OSLCode"]["parameters"]["minY"].setInput( __children["Rectangle"]["area"]["min"]["y"] )
__children["OSLCode"]["parameters"]["maxX"].setInput( __children["Rectangle"]["area"]["max"]["x"] )
__children["OSLCode"]["parameters"]["maxY"].setInput( __children["Rectangle"]["area"]["max"]["y"] )
__children["OSLCode"]["parameters"]["cornerRadius"].setInput( __children["Rectangle"]["cornerRadius"] )
__children["OSLCode"]["parameters"]["lineWidth"].setInput( __children["Rectangle"]["lineWidth"] )
__children["OSLCode"]["code"].setValue( 'vector size = abs( vector( maxX - minX, maxY - minY, 0 ) );\nvector middle = 0.5 * vector( minX + maxX, minY + maxY, 0 );\nvector d = P - middle;\nvector corner = 0.5 * size - abs( P - middle );\nfloat l;\nif( corner[0] > corner[1] )\n{\n\tl = size[0];\n}\nelse\n{\n\tcorner = vector( corner[1], corner[0], 0 );\n\tl = size[1];\n}\n\nfloat r = min( cornerRadius, 0.5 * min( size[0], size[1] ) );\n\nfloat curvedEndLength = 0.25 * M_PI * r;\nfloat totalLength = l - 2 * r + 2 * curvedEndLength;\n\nfloat curLength;\nif( corner[1] < -0.5 * lineWidth - 1)\n{\n\tcurLength = 0;\n}\nelse if( corner[0] >= r )\n{\n\tcurLength = corner[0] - r + curvedEndLength;\n}\nelse\n{\n\tcurLength = ( atan2( r - corner[0], r - corner[1] ) - M_PI * 0.25) * r;\n}\n\nfloat cycleLen = 1 / ceil( totalLength / dashLength );\n\noutput1 = mod( curLength / totalLength + 0.25 * cycleLen, cycleLen ) < cycleLen * 0.5;\n' )
__children["OSLCode"]["__uiPosition"].setValue( imath.V2f( 61.8478012, 22.2606125 ) )
__children["BoxIn1"]["name"].setValue( 'dashLength' )
__children["BoxIn1"]["__in"].setInput( __children["dashLength"] )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'label', 'dashLength' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["out"], 'noduleLayout:section', 'right' )
__children["BoxIn1"]["__uiPosition"].setValue( imath.V2f( 32.9392014, 25.8600178 ) )
Gaffer.Metadata.registerValue( __children["dashLength"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["dashLength"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["dashLength"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["dashLength"], 'description', 'Length of a dash plus the length of a spacer.' )
Gaffer.Metadata.registerValue( __children["dashLength"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["dashLength"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["dashLength"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["dashLength"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["dashLength"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["dashLength"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["dashLength"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["dashLength"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 7 )
__children["Merge1"]["in"][0].setInput( __children["BoxIn"]["out"] )
__children["Merge1"]["in"][1].setInput( __children["Merge"]["out"] )
__children["Merge1"]["operation"].setValue( 8 )
__children["Merge1"]["__uiPosition"].setValue( imath.V2f( 43.0507927, -21.3542957 ) )
Gaffer.Metadata.registerValue( __children["area"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["area"], 'description', 'The area of the rectangle before the transform is applied.' )
Gaffer.Metadata.registerValue( __children["area"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["area"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["area"]["min"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["area"]["min"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["area"]["max"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["area"]["max"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'description', 'The width of the outline, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["cornerRadius"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["cornerRadius"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["cornerRadius"], 'description', 'Used to give the rectangle rounded corners. A radius of\n0 gives square corners.' )
Gaffer.Metadata.registerValue( __children["cornerRadius"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["cornerRadius"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'description', 'Renders a dashed rectangle with adjustable line width, corner radius, drop shadow and transform.' )
Gaffer.Metadata.registerValue( parent, 'documentation:url', '' )


del __children

